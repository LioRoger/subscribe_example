// Code generated by github.com/actgardner/gogen-avro/v7. DO NOT EDIT.
/*
 * SOURCE:
 *     record.avsc
 */
package dtsavro

import (
	"github.com/actgardner/gogen-avro/v7/compiler"
	"github.com/actgardner/gogen-avro/v7/vm"
	"github.com/actgardner/gogen-avro/v7/vm/types"
	"io"
)

type BinaryObject struct {
	Type string `json:"type"`

	Value []byte `json:"value"`
}

const BinaryObjectAvroCRC64Fingerprint = "\xaf\xbe\xee}\x1b\xe04~"

func NewBinaryObject() *BinaryObject {
	return &BinaryObject{}
}

func DeserializeBinaryObject(r io.Reader) (*BinaryObject, error) {
	t := NewBinaryObject()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err
	}
	return t, err
}

func DeserializeBinaryObjectFromSchema(r io.Reader, schema string) (*BinaryObject, error) {
	t := NewBinaryObject()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err
	}
	return t, err
}

func writeBinaryObject(r *BinaryObject, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Type, w)
	if err != nil {
		return err
	}
	err = vm.WriteBytes(r.Value, w)
	if err != nil {
		return err
	}
	return err
}

func (r *BinaryObject) Serialize(w io.Writer) error {
	return writeBinaryObject(r, w)
}

func (r *BinaryObject) Schema() string {
	return "{\"fields\":[{\"name\":\"type\",\"type\":\"string\"},{\"name\":\"value\",\"type\":\"bytes\"}],\"name\":\"com.alibaba.dts.formats.avro.BinaryObject\",\"type\":\"record\"}"
}

func (r *BinaryObject) SchemaName() string {
	return "com.alibaba.dts.formats.avro.BinaryObject"
}

func (_ *BinaryObject) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ *BinaryObject) SetInt(v int32)       { panic("Unsupported operation") }
func (_ *BinaryObject) SetLong(v int64)      { panic("Unsupported operation") }
func (_ *BinaryObject) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ *BinaryObject) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ *BinaryObject) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ *BinaryObject) SetString(v string)   { panic("Unsupported operation") }
func (_ *BinaryObject) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *BinaryObject) Get(i int) types.Field {
	switch i {
	case 0:
		return &types.String{Target: &r.Type}
	case 1:
		return &types.Bytes{Target: &r.Value}
	}
	panic("Unknown field index")
}

func (r *BinaryObject) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *BinaryObject) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ *BinaryObject) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ *BinaryObject) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ *BinaryObject) Finalize()                        {}

func (_ *BinaryObject) AvroCRC64Fingerprint() []byte {
	return []byte(BinaryObjectAvroCRC64Fingerprint)
}
